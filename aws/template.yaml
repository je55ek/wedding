AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CodeKey:
    Type: String
    Description: S3 object key of the zipped wedding code.
  BucketName:
    Default: flyingj-code-dev
    Type: String
    Description: Name of the S3 bucket that contains the zipped wedding code.
  EnvelopeBucket:
    Default: http://s3.amazonaws.com/flyingj-wedding/envelopes/
    Type: String
    Description: URL prefix of the S3 bucket that contains envelope images.
  ResourceBucket:
    Default: flyingj-wedding
    Type: String
    Description: S3 bucket name where templates and static site resources are kept
  CustomDomainName:
    Default: www.flyingjs4.life
    Type: String
    Description: Domain name
  SslCertificate:
    Default: arn:aws:acm:us-east-1:740502329883:certificate/bd4b143e-7c8b-48c8-8809-c22391105a02
    Type: String
    Description: ARN of the SSL certificate for www.flyingjs4.life
Description: Flying Js serverless wedding RSVP application.
Resources:
  Parties:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
      Handler: app.parties_handler
      Role: !GetAtt 
        - PartiesRole
        - Arn
      Runtime: python3.6
  Passengers:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PASSENGERS_TABLE: !Ref PassengersTable
      Handler: app.passengers_handler
      Role: !GetAtt 
        - PassengersRole
        - Arn
      Runtime: python3.6
  Envelopes:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
          ENVELOPE_BUCKET: !Ref EnvelopeBucket
      Handler: app.envelope_handler
      Role: !GetAtt 
        - EnvelopesRole
        - Arn
      Runtime: python3.6
  Invitations:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
      Handler: app.invitation_handler
      Role: !GetAtt
        - InvitationsRole
        - Arn
      Runtime: python3.6
  Rsvp:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
      Handler: app.rsvp_handler
      Role: !GetAtt
        - RsvpRole
        - Arn
      Runtime: python3.6
  Rideshare:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Handler: app.ride_share_handler
      Role: !GetAtt
        - RideshareRole
        - Arn
      Runtime: python3.6
  Thanks:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Handler: app.thank_you_handler
      Role: !GetAtt
        - ThanksRole
        - Arn
      Runtime: python3.6
  Drivers:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          DRIVERS_TABLE: !Ref DriversTable
      Handler: app.drivers_handler
      Role: !GetAtt 
        - DriversRole
        - Arn
      Runtime: python3.6
  PartiesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PartiesRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PartiesTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  PassengersRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PassengersRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PassengersTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  EnvelopesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EnvelopeRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PartiesTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  InvitationsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: InvitationsRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt
                  - PartiesTable
                  - Arn
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - >-
                    arn:aws:s3:::${__BucketName__}/templates/*
                  - __BucketName__: !Ref ResourceBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  RsvpRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: RsvpRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt
                  - PartiesTable
                  - Arn
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - >-
                    arn:aws:s3:::${__BucketName__}/templates/*
                  - __BucketName__: !Ref ResourceBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  RideshareRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: RideshareRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - >-
                    arn:aws:s3:::${__BucketName__}/templates/*
                  - __BucketName__: !Ref ResourceBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
    ThanksRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ThanksRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - >-
                    arn:aws:s3:::${__BucketName__}/templates/*
                  - __BucketName__: !Ref ResourceBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  DriversRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DriversRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - DriversTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  SiteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      Policies:
        - PolicyName: SiteRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Effect: Allow
                Resource:
                  - !Sub
                    - >-
                      arn:aws:s3:::${__BucketName__}/public/*
                    - __BucketName__: !Ref ResourceBucket
                  - !Sub
                    - >-
                      arn:aws:s3:::${__BucketName__}/public
                    - __BucketName__: !Ref ResourceBucket
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
  PartiesGetPartiesPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesGetPartyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversCreateDriverPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersCreatePassengersPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersDeletePassengerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  EnvelopesGetEnvelopesPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Envelopes
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/envelopes/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversGetDriverPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversGetDriversPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesCreatePartyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesUpdatePartyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersUpdatePassengerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengersPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversDeleteDriverPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversUpdateDriverPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesDeletePartyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  InvitationsGetInvitationPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Invitations
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/invitation
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  RideshareGetRidesharePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Rideshare
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/rideshare
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  RidesharePostRidesharePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Rideshare
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/rideshare
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  ThanksGetThanksPermission:
  Type: 'AWS::Lambda::Permission'
  Properties:
    Action: 'lambda:invokeFunction'
    Principal: apigateway.amazonaws.com
    FunctionName: !Ref Thanks
    SourceArn: !Sub
      - >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/thanks
      - __Stage__: '*'
        __ApiId__: !Ref ServerlessRestApi
  RsvpGetRsvpPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Rsvp
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/rsvp
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  RsvpPostRsvpPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Rsvp
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/rsvp
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  PassengersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  DriversTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  AdministratorUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
      - ApiId: !Ref ServerlessRestApi
        Stage: !Ref ServerlessRestApiProdStage
      Quota:
        Limit: 5000
        Period: DAY
      Throttle:
        BurstLimit: 500
        RateLimit: 100
      UsagePlanName: Administrator
  ApiKey: 
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn: 
      - ServerlessRestApiDeployment
      - ServerlessRestApiProdStage
    Properties: 
      Name: flyingjs
      Enabled: true
      StageKeys: 
        - RestApiId: 
            Ref: ServerlessRestApi
          StageName: !Ref ServerlessRestApiProdStage
  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties : 
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref AdministratorUsagePlan
  DomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref SslCertificate
      EndpointConfiguration:
        Types:
          - EDGE
  UrlMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    DependsOn: 
      - DomainName
      - ServerlessRestApiDeployment
      - ServerlessRestApiProdStage
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeployment
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  ServerlessRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'Flying J wedding PROD RestApi deployment'
      StageName: Prod
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "302":
                  description: "Redirect to index page"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "200":
                    statusCode: "302"
                    responseParameters:
                      method.response.header.Location: !Sub >-
                        'https://${CustomDomainName}/index.html'
                passthroughBehavior: "when_no_templates"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /passengers:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
          /parties:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
          /drivers:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
          '/passengers/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            delete:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
          '/drivers/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            delete:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
          '/parties/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            delete:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            get:
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
          '/envelopes/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - images/png
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            get:
              consumes:
                - "application/json"
                - "image/png"
              responses:
                "302":
                  description: "Image redirect"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "302"
                    responseParameters:
                      method.response.header.Location : "integration.response.body.location"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Envelopes.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  image/png: "#set($inputRoot = $input.path('$'))\n{\n  \"partyId\": \"$input.params('id')\"\n}"
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"partyId\": \"$input.params('id')\"\n}"
                contentHandling: CONVERT_TO_TEXT
                type: aws
          '/invitation':
            get:
              consumes:
              - "application/json"
              produces:
              - "text/html"
              parameters:
              - name: "party"
                in: "query"
                required: false
                type: "string"
              - name: "guest"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$').body"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Invitations.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"partyId\": \"\
                    $input.params('party')\",\n    \"guestId\": \"$input.params('guest')\"\
                    \n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          '/rsvp':
            get:
              consumes:
              - "application/json"
              produces:
              - "text/html"
              parameters:
              - name: "party"
                in: "query"
                required: false
                type: "string"
              - name: "guest"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$').body"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Rsvp.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"partyId\"\
                    : \"$input.params('party')\",\n    \"guestId\": \"$input.params('guest')\"\
                    ,\n    \"httpMethod\": \"GET\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: true
                type: "string"
              responses:
                "303":
                  description: "Redirect to rideshare page"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "303"
                    responseParameters:
                      method.response.header.Location : "integration.response.body.body"
                requestTemplates:
                  application/x-www-form-urlencoded: "{\n    \"query\": \"$input.body\",\n\
                    \    \"httpMethod\": \"POST\"\n}"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Rsvp.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          '/rideshare':
            get:
              consumes:
              - "application/json"
              produces:
              - "text/html"
              parameters:
              - name: "local"
                in: "query"
                required: false
                type: "string"
              - name: "guest"
                in: "query"
                required: false
                type: "string"
              - name: "rideshare"
                in: "query"
                required: false
                type: "string"
              - name: "party"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$').body"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Rideshare.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n    \"httpMethod\": \"GET\",\n    \"query\": {\n        \"local\": \"$input.params(\'local\')\",\n        \"guestId\": \"$input.params(\'guest\')\",\n        \"rideshare\": \"$input.params(\'rideshare\')\",\n        \"partyId\": \"$input.params(\'party\')\"\n    }\n}\n"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: true
                type: "string"
              responses:
                "303":
                  description: "Redirect to thank-you page"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "303"
                    responseParameters:
                      method.response.header.Location : "integration.response.body.body"
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/x-www-form-urlencoded: "{\n    \"httpMethod\": \"POST\",\n    \"query\": \"$input.body\"\n}\n"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Rsvp.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          '/thanks':
            get:
              consumes:
              - "application/json"
              produces:
              - "text/html"
              parameters:
              - name: "firstName"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$').body"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Thanks.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"firstName\"\
                    : \"$input.params('firstName')\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /{item}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "item"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt
                  - SiteRole
                  - Arn
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                requestParameters:
                  integration.request.path.item: "method.request.path.item"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:s3:path/${ResourceBucket}/public/{item}
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
          /css/{item}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "item"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt
                  - SiteRole
                  - Arn
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                requestParameters:
                  integration.request.path.item: "method.request.path.item"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:s3:path/${ResourceBucket}/public/css/{item}
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
          /images/{item}:
            get:
              parameters:
              - name: "Accept"
                in: "header"
                required: true
                type: "string"
              - name: "item"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt
                  - SiteRole
                  - Arn
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                requestParameters:
                  integration.request.header.Accept: "method.request.header.Accept"
                  integration.request.path.item: "method.request.path.item"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:s3:path/${ResourceBucket}/public/images/{item}
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        x-amazon-apigateway-binary-media-types:
        - "image/png"
        - "image/jpeg"
        - "application/octet-stream"
        - "image/webp"
        - "image/apng"
        swagger: '2.0'

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CodeKey:
    Type: String
    Description: S3 object key of the zipped wedding code.
  BucketName:
    Default: flyingj-code-dev
    Type: String
    Description: Name of the S3 bucket that contains the zipped wedding code.
  EnvelopeBucket:
    Default: http://s3.amazonaws.com/flyingj-wedding/envelopes/
    Type: String
    Description: URL prefix of the S3 bucket that contains envelope images.
  TemplateBucket:
    Default: flyingj-wedding/templates
    Type: String
    Description: S3 bucket name and prefix where templates are kept
Description: Flying Js serverless wedding RSVP application.
Resources:
  Passengers:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PASSENGERS_TABLE: !Ref PassengersTable
      Handler: app.passengers_handler
      Role: !GetAtt 
        - PassengersRole
        - Arn
      Runtime: python3.6
  Envelopes:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
          ENVELOPE_BUCKET: !Ref EnvelopeBucket
      Handler: app.envelope_handler
      Role: !GetAtt 
        - EnvelopesRole
        - Arn
      Runtime: python3.6
  Invitations:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
      Handler: app.invitation_handler
      Role: !GetAtt
        - InvitationsRole
        - Arn
      Runtime: python3.6
  DriversDeleteDriverPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversGetDriverPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  PassengersRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PassengersRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PassengersTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  EnvelopesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EnvelopeRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PartiesTable
                  - Arn
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 
                  - >-
                    arn:aws:s3:::${__BucketName__}
                  - __BucketName__: !Ref EnvelopeBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  InvitationsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: InvitationsRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt
                  - PartiesTable
                  - Arn
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - >-
                    arn:aws:s3:::${__BucketName__}
                  - __BucketName__: !Ref TemplateBucket
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  DriversUpdateDriverPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesGetPartiesPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  Drivers:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          DRIVERS_TABLE: !Ref DriversTable
      Handler: app.drivers_handler
      Role: !GetAtt 
        - DriversRole
        - Arn
      Runtime: python3.6
  PartiesGetPartyPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversCreateDriverPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversGetDriversPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengersPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersDeletePassengerPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengerPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PassengersCreatePassengersPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PassengersDeletePassengerPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/passengers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  EnvelopesGetEnvelopesPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Envelopes
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/envelopes/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  EnvelopesGetEnvelopesPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Envelopes
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/envelopes/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversGetDriverPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DriversRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - DriversTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  DriversGetDriversPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/drivers
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PartiesCreatePartyPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PartiesGetPartiesPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersUpdatePassengerPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymentf954dfb544
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  PartiesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
  PartiesUpdatePartyPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PassengersUpdatePassengerPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversCreateDriverPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesCreatePartyPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PartiesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PartiesRolePolicy0
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:GetRecords'
                Resource: !GetAtt 
                  - PartiesTable
                  - Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  PartiesGetPartyPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengersPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  DriversDeleteDriverPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/drivers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PartiesUpdatePartyPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversUpdateDriverPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Drivers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/drivers/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PassengersCreatePassengersPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/passengers
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  PassengersGetPassengerPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Passengers
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/passengers/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  Parties:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref CodeKey
      Tags:
        - Value: wedding
          Key: project
      Environment:
        Variables:
          PARTIES_TABLE: !Ref PartiesTable
      Handler: app.parties_handler
      Role: !GetAtt 
        - PartiesRole
        - Arn
      Runtime: python3.6
  PartiesDeletePartyPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/parties/{id}
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  ServerlessRestApiDeploymentf954dfb544:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'RestApi deployment id: f954dfb544186969c8a130019dc2e304a785167e'
      StageName: Stage
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /passengers:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
          /parties:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
          /drivers:
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
          '/passengers/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Passengers.Arn}/invocations
              responses: {}
          '/drivers/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Drivers.Arn}/invocations
              responses: {}
          '/parties/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - application/json
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Parties.Arn}/invocations
              responses: {}
          '/envelopes/{id}':
            options:
               summary: CORS support
               consumes:
                 - application/json
               produces:
                 - images/png
               tags:
                 - CORS
               x-amazon-apigateway-integration:
                 type: mock
                 requestTemplates:
                   application/json: |
                     {
                       "statusCode" : 200
                     }
                 responses:
                   "default":
                     statusCode: "200"
                     responseParameters:
                       method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                       method.response.header.Access-Control-Allow-Methods : "'*'"
                       method.response.header.Access-Control-Allow-Origin : "'*'"
                     responseTemplates:
                       application/json: |
                         {}
               responses:
                 "200":
                   headers:
                     Access-Control-Allow-Headers:
                       type: "string"
                     Access-Control-Allow-Methods:
                       type: "string"
                     Access-Control-Allow-Origin:
                       type: "string"
            get:
              consumes:
                - "application/json"
                - "image/png"
              responses:
                "302":
                  description: "Image redirect"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  "default":
                    statusCode: "302"
                    responseParameters:
                      method.response.header.Location : "integration.response.body.location"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Envelopes.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  image/png: "#set($inputRoot = $input.path('$'))\n{\n  \"partyId\": \"$input.params('id')\"\n}"
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"partyId\": \"$input.params('id')\"\n}"
                contentHandling: CONVERT_TO_TEXT
                type: aws
          '/invitations':
            get:
              consumes:
              - "text/html"
              produces:
              - "text/html"
              parameters:
              - name: "party"
                in: "query"
                required: false
                type: "string"
              - name: "guest"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.json('$.body')"
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Invitations.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  text/html: "#set($inputRoot = $input.path('$'))\n{\n    \"partyId\": \"\
                    $input.params('party')\",\n    \"guestId\": \"$input.params('guest')\"\
                    \n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        swagger: '2.0'
  InvitationsGetInvitationPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Invitations
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/invitation
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  InvitationsGetInvitationPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Invitations
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/invitation
        - __Stage__: Prod
          __ApiId__: !Ref ServerlessRestApi
  PartiesDeletePartyPermissionTest:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Parties
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/parties/{id}
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  DriversTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: id
